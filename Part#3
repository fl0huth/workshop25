//Part 3//////////////////////////////
///////////////Part 3/////////////////
/////////////////////////////Part 3///
//Part 3//////////////////////////////
///////////////Part 3/////////////////
/////////////////////////////Part 3///

Main Goal : Play Audio By 2d Landscape Chapter 3!!!1! The Begaining!

//review////////////////////////
////////////////////////////////
////////////////////////////////

//load buffers and SLICE!

~src = Buffer.read(s,FluidFilesPath("Nicol-LoopE-M.wav"));
~indices = Buffer(s);

FluidBufOnsetSlice.processBlocking(s,~src,metric:9,threshold:0.5,indices:~indices,action:{"done!".postln});

//raw data:
~indices.loadToFloatArray(action:{arg data; data.postln})

//as waveform
FluidWaveform(~src,~indices);

//this time we also check for loudness!

(
~indices.loadToFloatArray(action: {
	arg fa;
	var features = Buffer(s);
	var stats = Buffer(s);
	var loudness = Buffer(s);
	var statsLoudness = Buffer(s);

	fa.doAdjacentPairs{|start,end,i|
		var duration = end - start;

		FluidBufSpectralShape.processBlocking(s,~src,start,duration,features:features,select:[\centroid]); //we want centroid
		FluidBufStats.processBlocking(s,features,stats: stats, select: [\mean]); //get the mean

		FluidBufLoudness.processBlocking(s,~src,start,duration,features: loudness, select:[\loudness]);  //we want loudness
		FluidBufStats.processBlocking(s,loudness,stats: statsLoudness,select: [\mean]); //get the mean of the loudness
	};

	s.sync;

	defer{FluidWaveform(~src,~indices,featuresBuffer:features,stackFeatures:true)};
	//defer{FluidWaveform(~src,~indices,featuresBuffer:loudness)};


})
)

//now we store the stats of our centroid + loudness in a dataset for further data mangling

(
~analysis = FluidDataSet(s);
~indices.loadToFloatArray(action: {
	arg fa;
	var features = Buffer(s);
	var stats = Buffer(s);
	var loudness = Buffer(s);
	var statsLoudness = Buffer(s);
	var point = Buffer(s);

	fa.doAdjacentPairs{|start,end,i| //i will be our identifier for entries in our dataset
		var duration = end - start;

		FluidBufSpectralShape.processBlocking(s,~src,start,duration,features:features,select:[\centroid]); //we want centroid
		FluidBufStats.processBlocking(s,features,stats: stats, select: [\mean]); //get the mean

		FluidBufLoudness.processBlocking(s,~src,start,duration,features: loudness, select:[\loudness]);  //we want loudness
		FluidBufStats.processBlocking(s,loudness,stats: statsLoudness,select: [\mean]); //get the mean of the loudness

		FluidBufCompose.processBlocking(s,stats,destination:point,destStartFrame:0);
		FluidBufCompose.processBlocking(s,statsLoudness,destination:point,destStartFrame:1);

		~analysis.addPoint(i,point); //we add our data "point" at id "i" to our dataset
	};

	s.sync;

	~analysis.print;


})
)



///not needed here!!!!!!

/*

//our trusty sampler////////////////////
///////////now we know the horror///////
////////////////////////////////////////

(
~playSlice = {|index|
	{
		var start = Index.kr(~indices,index);
		var end = Index.kr(~indices,index + 1);

		var head = Phasor.ar(0,BufRateScale.kr(~src),start,end);

		var play = BufRd.ar(1,~src,head);

		var time = end - start / SampleRate.ir(~src);

		var env = EnvGen.ar(Env.new([0,1,1,0],[0.005,time-0.035,0.03]),doneAction:2);

		play * env
	}.play;
}
)


//and play it

(
fork{
	~order.do{|i|
		~playSlice.(i);
		"Slice Index Number %".format(i).postln;
		0.1.wait;
	}
}
)

//make more interesting sounds


"/Users/lf0/samples/doroMixed/test/"

*/




