//Part 1//////////////////////////////
///////////////Part 1/////////////////
/////////////////////////////Part 1///
//Part 1//////////////////////////////
///////////////Part 1/////////////////
/////////////////////////////Part 1///

//Explain SC MAYBE

//first make synth for fun and explain by the way =)....

(|*...*|)

1

1.0

1+1

((12/7).pow(4).sqrt).tanh

"String"

\symbol
symbol:

(
"hi!".postln; //semicolon?
1+3;
)

Object

{"Functions And Methods".postln}

12.do{|i|"Functions And Methods %".format(i).postln};

Number

(
var one = 1;
var two = 2;

one + two
)

~globalVariables
a=9;






///Find your Extension Folder
////////////////////////////
////////////////////////////

Platform.systemExtensionDir

///Load Audio Information
//Explain Buffer/////////
/////////////////////////

~src = Buffer.read(s,FluidFilesPath("Nicol-LoopE-M.wav"));

//Listen.................
/////////////////////////
/////////////////////////

~src.play;
~src.plot;

/*
We want to slice our audiofile by transients and use our slices to find a "Spectral Centroid"
*/

//Slice it. Explain Function
//Explain Slicer////////////
////////////////////////////

(
{
	var sig = PlayBuf.ar(1,~src);
	var onset = FluidOnsetSlice.ar(sig,9,0.5);
	
	[sig*0.4,onset]
}.play;
)

//Slice it. Buffer//////////
//Explain Slicer////////////
////////////////////////////

~indices = Buffer(s);

(
FluidBufOnsetSlice.processBlocking(s,~src,metric:9,threshold:0.5,indices:~indices,action:{"done!".postln});
)

~indices.postln;


//Load Buffer back into Language
//Explain Slicer////////////////
////////////////////////////////

(
~indices.loadToFloatArray(action: {
	arg fa;
	fa.postln;
	fa.size.postln;
}
)
)

//Show it///////////////////////
////////////////////////////////
////////////////////////////////

FluidWaveform(~src,~indices)

//play slice////////////////////
///////////explain the horror///
////////////////////////////////

(
~playSlice = {|index|
	{
		var start = Index.kr(~indices,index);
		var end = Index.kr(~indices,index + 1);
		
		var head = Phasor.ar(0,BufRateScale.kr(~src),start,end);
		
		var play = BufRd.ar(1,~src,head);
		
		var time = end - start / SampleRate.ir(~src);
		
		var env = EnvGen.ar(Env.new([0,1,1,0],[0.005,time-0.035,0.03]),doneAction:2);
		
		play * env
	}.play;
}
)

//finally!
~playSlice.(24.rand);

//or

(
fork{
	(~indices.numFrames-1).do{|i|
		~playSlice.(i);
		0.1.wait;
	}
}
)
