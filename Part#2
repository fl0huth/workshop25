//Part 2//////////////////////////////
///////////////Part 2/////////////////
/////////////////////////////Part 2///
//Part 2//////////////////////////////
///////////////Part 2/////////////////
/////////////////////////////Part 2///


//review////////////////////////
////////////////////////////////
////////////////////////////////

//load buffers and SLICE!

~src = Buffer.read(s,FluidFilesPath("Nicol-LoopE-M.wav"));
~indices = Buffer(s);
FluidBufOnsetSlice.processBlocking(s,~src,metric:9,threshold:0.5,indices:~indices,action:{"done!".postln});


FluidWaveform(~src,~indices);

//get info out of buffer realm and explain
//start-end idea with ".doAdjacentPairs"//
//////////////////////////////////////////
//////////////////////////////////////////

//we need one more buffer to store our results!
//show info: https://learn.flucoma.org/reference/spectralshape
//show powerpoint

(
~indices.loadToFloatArray(action: {
	arg fa;
	var features = Buffer(s);
	
	fa.doAdjacentPairs{|start,end,i|
		var duration = end - start;
		
		[i,start,end].postln;
		
		FluidBufSpectralShape.processBlocking(s,~src,start,duration,features:features);
		
		//we want centroid!
		//FluidBufSpectralShape.processBlocking(s,~src,start,duration,features:features,select:[\centroid]);
		
		//we get a time-series of spectral centroids!
		
		s.sync;
		
		//read output of buffer "features"
		
		features.loadToFloatArray(action:{
			arg fa;
			
			fa.postln;
			features.postln;
			
			" ".postln;
		})
	}
})
)

//Buffer
//what is in my buffer:
//Buffer(8, 53, 1, 86.1328125, nil)
/*
1. Identifier (Bufnum)
2. FFT Frames (Number)
3. channels
*/

//FFT Frames are Different....so how do we compare them?
//With BufStats we can find the average value of all the fft measurements

(
~indices.loadToFloatArray(action: {
	arg fa;
	var features = Buffer(s);
	var stats = Buffer(s);
	
	fa.doAdjacentPairs{|start,end,i|
		var duration = end - start;
		
		[i,start,end].postln;
		
		FluidBufSpectralShape.processBlocking(s,~src,start,duration,features:features,select:[\centroid]);
		FluidBufStats.processBlocking(s,features,stats: stats, select: [\mean]);
		//FluidBufStats can do this for any sized input from FluidBufSpectralShape. We only use \centroid.
		
		//we get a summary of a time-series of spectral centroids! (READ THAT AGAIN!!!!)
		//one number for every slice
		
		
		s.sync;
		
		//read output of buffer "stats"
		
		stats.loadToFloatArray(action:{
			arg fa;
			
			fa.postln;
			stats.postln;
			
			" ".postln;
		})
	}
})
)

///14:00...

///now we want to arrange our friendly mean centroids with FluidBufCompose
//we basically copy our values in a new buffer to sort them later!

(
~indices.loadToFloatArray(action: {
	arg fa;
	var features = Buffer(s);
	var stats = Buffer(s);
	var meanCentroid = Buffer(s);
	
	fa.doAdjacentPairs{|start,end,i| //we now use the counter "i" in FluidBufCompose
		var duration = end - start;
		
		[i,start,end].postln;
		
		FluidBufSpectralShape.processBlocking(s,~src,start,duration,features:features,select:[\centroid]);
		FluidBufStats.processBlocking(s,features,stats: stats, select: [\mean]);
		FluidBufCompose.processBlocking(s,stats,destination:meanCentroid,destStartFrame:i);
		
		s.sync;
		
		//read output of buffer "stats"
		
		meanCentroid.loadToFloatArray(action:{
			arg fa;
			
			fa.postln;
			meanCentroid.postln;
			
			" ".postln;
		}
	)}
})
)



///now we can sort our meancentroids


(
~indices.loadToFloatArray(action: {
	arg fa;
	var features = Buffer(s);
	var stats = Buffer(s);
	var meanCentroid = Buffer(s);
	
	fa.doAdjacentPairs{|start,end,i| //we now use the counter "i" in FluidBufCompose
		var duration = end - start;
		
		[i,start,end].postln;
		
		FluidBufSpectralShape.processBlocking(s,~src,start,duration,features:features,select:[\centroid]);
		FluidBufStats.processBlocking(s,features,stats: stats, select: [\mean]);
		FluidBufCompose.processBlocking(s,stats,destination:meanCentroid,destStartFrame:i);		
		//read output of buffer "stats"
	};
	
	s.sync;
	
	meanCentroid.loadToFloatArray(action:{
		arg fa;
		
		~meanCentroid = fa; //we use a global variable to get out of our functionspace here!
		
	}
	)
})
)

//and sort it with a method 

~meanCentroid.sort;

//but we still need the indices of the (now) spectral centroid
//~meanCentroid will be altered but we use a new global variable to be safe and not sorry

~order = ~meanCentroid.order;

//our trusty sampler////////////////////
///////////now we know the horror///////
////////////////////////////////////////

(
~playSlice = {|index|
	{
		var start = Index.kr(~indices,index);
		var end = Index.kr(~indices,index + 1);
		
		var head = Phasor.ar(0,BufRateScale.kr(~src),start,end);
		
		var play = BufRd.ar(1,~src,head);
		
		var time = end - start / SampleRate.ir(~src);
		
		var env = EnvGen.ar(Env.new([0,1,1,0],[0.005,time-0.035,0.03]),doneAction:2);
		
		play * env
	}.play;
}
)


//and play it

(
fork{
	~order.do{|i|
		~playSlice.(i);
		0.1.wait;
	}
}
)

//make more interesting sounds


"/Users/lf0/samples/doroMixed/test/"







